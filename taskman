#!/usr/bin/env ruby

# Task
# id, content, flags, is_done
#
# afficher
# done
class Task


	OPTIONS_DEFAULT = {
		flags: [],
		date: nil
	}

	# Retourne une tache
	def self.add params
		contenu = params.shift
		id = @tableau_taches.map(&:id).max+1

		new_task = Task.new id, contenu

		params.each do |argument|
			champ, valeur = argument.split(':')

			if champ == "flags"
				new_task.flags = value.split(',')
			else
				raise "Parametre incorrect: #{champ}"
			end
		end

		@tableau_taches << new_task
	end

	def self.get_task id
		@tableau_taches.select{|tache| tache.id==id }.first
	end

	def self.delete id
		@tableau_taches.reject!{ |tache| tache.id==id }
	end

	def self.display
		puts "*****TASKMAN*****"
		puts "LISTE DES TACHES "

		@tableau_taches.each(&:display)
	end

	attr_accessor :id, :content, :flags
	attr_reader :is_done

	def initialize id, content, opts={}
		opts = OPTIONS_DEFAULT.merge(opts)

		@id = id
		@content = content
		@flags = opts[:flags]
		@is_done = false
	end

	def display
		puts "[#{ @is_done ? "X" : " " }] #{@id} - #{@content} (#{@flags.join(",")})"
	end

	def done
		@is_done = true
	end

	@tableau_taches = [
		Task.new(0, "Améliorer taskman", flags:%w(important urgent ))
	]
end

module Command
	@commands = {}

	def self.register action
		@commands[action.command] = action
	end


	def self.launch!
		command = ARGV.shift

		is_executed = false

		@commands.each do |k, action|
			if k == command
				is_executed = true
				action.apply(ARGV)
			end
		end

		unless is_executed
			display_help
		end
	end

	def self.display_help
		puts "taskman [commande] [contenu|id] [options...]"
		puts "--------------------------------------------"
		@commands.each do |k, action|
			puts action.to_s
		end
	end

	class Action
		attr_accessor :command, :arguments, :description, :block

		def initialize command, arguments, description, &block
			@command = command
			@block = block
			@arguments = arguments
			@description = description
		end

		def apply arguments
			block.call(arguments)
		end

		def register!
			Command.register(self)
		end

		def to_s
			puts "#{@command} #{@arguments}\t * #{@description}"
		end
	end

	class TaskAction < Action
		def initialize command, arguments, description, &block
			super command, arguments, description, &block
		end

		def apply arguments
			id = arguments.shift.to_i
			task = Task.get_task(id)

			if task.nil?
				puts "La tache #{id} n'existe pas!"
				exit
			end

			block.call(task, arguments)
		end

		def to_s
			puts "#{@command} :id #{@arguments}\t * #{@description}"
		end
	end

end


#Command.register('add', ':contenu (options...)', 'Crée une nouvelle tache.') do |arguments|
#	Task.add(arguments)
#end


Command::Action.new('add', ':contenu (options...)', 'Crée une nouvelle tache.') do |arguments|
	Task.add(arguments)
end.register!

Command::TaskAction.new('del', '', 'Supprime une tache') do |task, args|
	Task.delete task.id
end.register!

#Command.register 'del', ':id', 'Supprime une tache' do |args|
#	Task.delete args.shift.to_i
#end
#
#Command.register 'mod', ':id (options...)', 'Modifie une tache' do |args|
#	puts "TODO"
#end
#
#Command.register 'list', ':filtre', 'Liste les taches' do |args|
#	Task.display
#end

#Command.register 'clear', '', 'Supprime toute les taches' do |args|
	#A FAIRE: Supprimer toute les taches.
#end

Command.launch!

#parser_commande(command)
Task.display