#!/usr/bin/env ruby

$tableau_taches = [
	{ id: 0, :content => "Ameliorer taskman", flags: %w(important urgent) }
]

OPTIONS_DEFAULT = {
	flags: [],
	date: nil
}



def supprimer id
	$tableau_taches.reject{|tache| tache[:id]==id }
end

# Retourne une tache
def ajouter params
	contenu = params.shift

	tache = {}

	tache[:id] = $tableau_taches.map{ |tache| tache[:id] }.max+1



	tache.merge!(OPTIONS_DEFAULT)


	tache[:content] = contenu

	params.each do |argument|
		champ, valeur = argument.split(':')

		if champ == "flags"
			tache[champ.to_sym] = valeur.split(",")
		else
			tache[champ.to_sym] = valeur
		end
	end

	tache
end


def afficher
	puts "*****TASKMAN*****"
	puts "LISTE DES TACHES "

	$tableau_taches.each do |tache|
		puts "#{tache[:id]} - #{tache[:content]} (#{tache[:flags].join(",")})"
	end
end

def afficher_aide
	puts "taskman [commande] [contenu|id] [options...]"
	puts "--------------------------------------------"
	$commandes.each do |k, v|
		puts "#{v[:keyword]} #{v[:arguments]}\t * #{v[:description]}"
	end
end

$commandes = {}

def register_command command, arguments, description, &block
	$commandes[command] = {
		keyword: command,
		arguments: arguments,
		description: description,
		block: block
	}
end

def lancer_commande!
	$command = ARGV.shift

	commande_execute = false
	$commandes.each do |k, v|
		if k == $command
			commande_execute = true
			v[:block].call(ARGV)
		end
	end

	unless commande_execute
		afficher_aide
	end
end

register_command 'add', ':contenu (options...)', 'Cr√©e une nouvelle tache.' do |arguments|
	$tableau_taches << ajouter(arguments)
end

register_command 'del', ':id', 'Supprime une tache' do |args|
	supprimer args.shift.to_i
end

register_command 'mod', ':id (options...)', 'Modifie une tache' do |args|
	puts "TODO"
end

register_command 'list', ':filtre', 'Liste les taches' do |args|
	afficher
end

register_command 'clear', '', 'Supprime toute les taches' do |args|
	#A FAIRE: Supprimer toute les taches.
end

lancer_commande!

#parser_commande(command)
afficher